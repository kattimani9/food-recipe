{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","recipe","className","style","map","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","console","log","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"2QAsBeA,EAjBD,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,MAAMC,EAAuC,EAAvCA,SAASC,EAA8B,EAA9BA,MAAaC,GAAiB,EAAxBC,OAAwB,EAAjBD,aACxC,OACI,sBAAKE,UAAWC,IAAMF,OAAtB,UAEA,6BAAKJ,IACL,6BAAKG,EAAYI,KAAI,SAAAJ,GAAW,OAE5B,6BAAKA,EAAYK,YAErB,4BAAIP,IACJ,qBAAKI,UAAWC,IAAMJ,MAAOO,IAAKP,EAAOQ,IAAI,SC2DtCC,EAtEL,WAER,IAMA,EAA2BC,mBAAS,IAApC,mBAAMC,EAAN,KAAcC,EAAd,KACA,EAAyBF,mBAAS,KAAlC,mBAAMG,EAAN,KAAaC,EAAb,KAEA,EAAwBJ,mBAAS,QAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAGAC,qBAAU,WACRC,IACAC,QAAQC,IAAI,yBAGZ,CAACL,IAEH,IAAMG,EAAU,uCAAE,8BAAAG,EAAA,sEAEMC,MAAM,mCAAD,OAAoCP,EAApC,mBArBf,WAqBe,oBApBf,qCAkBI,cAEVQ,EAFU,gBAGCA,EAASC,OAHV,OAGVC,EAHU,OAIhBN,QAAQC,IAAIK,GACZb,EAAWa,EAAKC,MALA,2CAAF,qDAuBhB,OAEE,sBAAKvB,UAAU,MAAf,UACE,uBAAOwB,SAVM,SAAAC,GACfA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAOoBX,UAAU,cAAtC,UACE,oBAAIA,UAAU,UAAd,8CACA,uBAAOA,UAAW,aAAa2B,KAAK,OAAOC,MAAOlB,EAAQmB,SAjB5C,SAAAJ,GAClBd,EAAUc,EAAEK,OAAOF,UAiBf,wBAAQ5B,UAAU,gBAAgB2B,KAAK,SAAvC,uBAGF,qBAAK3B,UAAU,WAAf,SACCQ,EAAQN,KAAI,SAAAH,GAAM,OAEjB,cAAC,EAAD,CAEEJ,MAAOI,EAAOA,OAAOgC,MACrBnC,SAAUG,EAAOA,OAAOH,SACxBC,MAAOE,EAAOA,OAAOF,MACrBC,YAAaC,EAAOA,OAAOD,aAJtBC,EAAOA,OAAOgC,gBCjDdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,0B","file":"static/js/main.61bf154d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\n\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Recipe =({title,calories,image,recipe,ingredients}) => {\r\n    return(\r\n        <div className={style.recipe}>\r\n\r\n        <h1>{title}</h1>\r\n        <o1>{ingredients.map(ingredients =>\r\n        (\r\n            <li>{ingredients.text}</li>\r\n        )) }</o1>\r\n        <p>{calories}</p>\r\n        <img className={style.image} src={image} alt=\"\" />\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React,{useEffect,useState} from \"react\";\nimport './App.css';\nimport Recipe from \"./Recipe\";\n\nconst App=() => {\n\n  const APP_ID =\"e29a3d3f\";\n  const APP_KEY=\"8be5cd059ee1d27d90880a1275db7931\";\n\n  // Below for Testing \n // const exampleReq=`https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  const[recipes,setRecipes] =useState([]);\n  const[search,setSearch]= useState(' ');\n\n  const [query,setQuery] =useState('cake');\n\n\n  useEffect(() => {\n    getRecipes();\n    console.log('Effect has been run');\n    \n    \n  },[query]);\n\n  const getRecipes =async () =>{\n\n    const response =await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data=await response.json();\n    console.log(data);\n    setRecipes(data.hits);\n\n  }\n  //please add Below code in between  between </form> and </div> tag to check counter ++ is working \n  //<h1 onClick ={() => setCounter(counter + 1)}>{counter}</h1>\n\n  const updateSearch= e => {\n    setSearch(e.target.value);\n\n  }\n\n  const getSearch= e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n\n  return (\n\n    <div className=\"App\" >\n      <form  onSubmit={getSearch} className=\"search-form\">\n        <h1 className=\"heading\">Please Enter you Favourite Food.</h1>\n        <input className =\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n        <button className=\"search-button\" type=\"submit\">Search</button>\n        \n      </form>\n      <div className=\"recepies\">\n      {recipes.map(recipe =>(\n\n        <Recipe \n          key={recipe.recipe.label}\n          title={recipe.recipe.label} \n          calories={recipe.recipe.calories}\n          image={recipe.recipe.image}\n          ingredients={recipe.recipe.ingredients}\n\n        />\n      ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__jjtFM\"};"],"sourceRoot":""}